<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MonkeySpeakEx</name>
  </assembly>
  <members>
    <member name="T:Monkeyspeak.ILexer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.ILexer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.ILexer.AddDefinition(Monkeyspeak.TokenDefinition)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.ILexer.AddDefinition(Monkeyspeak.TokenDefinition)</parameter>
          </include>
        </markup>
      </summary>
      <param name="tokenDefinition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tokenDefinition</parameter>
            <parameter>M:Monkeyspeak.ILexer.AddDefinition(Monkeyspeak.TokenDefinition)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.ILexer.Tokenize(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.ILexer.Tokenize(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Monkeyspeak.ILexer.Tokenize(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.ILexer.Tokenize(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Lexer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.Lexer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Lexer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Lexer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Lexer.AddDefinition(Monkeyspeak.TokenDefinition)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Lexer.AddDefinition(Monkeyspeak.TokenDefinition)</parameter>
          </include>
        </markup>
      </summary>
      <param name="tokenDefinition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tokenDefinition</parameter>
            <parameter>M:Monkeyspeak.Lexer.AddDefinition(Monkeyspeak.TokenDefinition)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Lexer.Tokenize(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Lexer.Tokenize(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Monkeyspeak.Lexer.Tokenize(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Lexer.Tokenize(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.MonkeyspeakEngine">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.MonkeyspeakEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakEngine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.#ctor(Monkeyspeak.Options)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakEngine</parameter>
          </include>
        </markup>
      </summary>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.#ctor(Monkeyspeak.Options)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.CompileToFile(Monkeyspeak.Page,System.String)">
      <summary>
            Compiles a Page to a file
            </summary>
      <param name="page">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>page</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.CompileToFile(Monkeyspeak.Page,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="filePath">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>filePath</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.CompileToFile(Monkeyspeak.Page,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.CompileToStream(Monkeyspeak.Page,System.IO.Stream)">
      <summary>
            Compiles a Page to a stream
            </summary>
      <param name="page">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>page</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.CompileToStream(Monkeyspeak.Page,System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
      <param name="stream">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>stream</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.CompileToStream(Monkeyspeak.Page,System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.CreateDefaultLexer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.CreateDefaultLexer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.CreateDefaultOptions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.CreateDefaultOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledFile(System.String)">
      <summary>
            Loads compiled script from file
            </summary>
      <param name="filePath">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>filePath</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledFile(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledFile(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledStream(System.IO.Stream)">
      <summary>
            Loads a compiled script from stream
            </summary>
      <param name="stream">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>stream</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStream(Monkeyspeak.Page@,System.IO.Stream)">
      <summary>
            Loads a Monkeyspeak script from a Stream into <paramref name="existingPage" />.
            </summary>
      <param name="existingPage">
            Reference to an existing Page
            </param>
      <param name="stream">
            Stream that contains the Monkeyspeak script. Closes the stream.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadFromStream(Monkeyspeak.Page@,System.IO.Stream)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStream(System.IO.Stream)">
      <summary>
            Loads a Monkeyspeak script from a Stream into a <see cref="T:Monkeyspeak.Page" />.
            </summary>
      <param name="stream">
            Stream that contains the Monkeyspeak script. Closes the stream.
            </param>
      <returns>
        <see cref="T:Monkeyspeak.Page" />
      </returns>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromString(Monkeyspeak.Page@,System.String)">
      <summary>
            Loads a Monkeyspeak script from a string into
            <paramref name="existingPage" />. and clears the old page
            </summary>
      <param name="existingPage">
            Reference to an existing Page
            </param>
      <param name="chunk">
            String that contains the Monkeyspeak script source.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadFromString(Monkeyspeak.Page@,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromString(System.String)">
      <summary>
            Loads a Monkeyspeak script from a string into a <see cref="T:Monkeyspeak.Page" />.
            </summary>
      <param name="chunk">
            String that contains the Monkeyspeak script source.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakEngine.LoadFromString(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Monkeyspeak.MonkeyspeakEngine.options">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.MonkeyspeakEngine.options</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.MonkeyspeakEngine.Options">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.MonkeyspeakEngine.Options</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.MonkeyspeakException">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.MonkeyspeakException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakException</parameter>
          </include>
        </markup>
      </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
      <param name="inner">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inner</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.MonkeyspeakException.#ctor(System.String,System.Object[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.MonkeyspeakException</parameter>
          </include>
        </markup>
      </summary>
      <param name="format">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>format</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.String,System.Object[])</parameter>
          </include>
        </markup>
      </param>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.MonkeyspeakException.#ctor(System.String,System.Object[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.Options">
      <summary>
            Monkey Speak Engine options
            </summary>
    </member>
    <member name="M:Monkeyspeak.Options.#ctor">
      <summary>
            default options preloaded
            </summary>
    </member>
    <member name="P:Monkeyspeak.Options.CanOverrideTriggerHandlers">
      <summary>
            If set to TRUE then an existing TriggerHandler can be overridden by newer TriggerHandler
            <para>
            Default: false
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.CommentSymbol">
      <summary>
            Comment literal symbol
            <para>
            Default: *
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.DefaultExecutePath">
      <summary>
            Default File path for executing assemblies such as
            <see cref="T:Monkeyspeak.Libraries.IO" /></summary>
    </member>
    <member name="P:Monkeyspeak.Options.StringBeginSymbol">
      <summary>
            Beginning string literal symbol
            <para>
            Default: {
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.StringEndSymbol">
      <summary>
            Ending string literal symbol
            <para>
            Default: }
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.StringLengthLimit">
      <summary>
            Used to limit the maximum length of a string
            <para>
            Default: Int32.MaxValue
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.TimerLimit">
      <summary>
            Used to limit the maximum amount of timers per execution
            <para>
            Default: 100
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.TriggerLimit">
      <summary>
            Used to limit the maximum amount of triggers per page
            <para>
            Default: 6000
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.VariableCountLimit">
      <summary>
            Used to limit the maximum amount of variables per page
            <para>
            Default: 1000
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.VariableDeclarationSymbol">
      <summary>
            Variable literal symbol
            <para>
            Default: %
            </para></summary>
    </member>
    <member name="P:Monkeyspeak.Options.Version">
      <summary>
            Current assembly version used internally by the compiler to handle versioning
            </summary>
    </member>
    <member name="T:Monkeyspeak.Page">
      <summary>
            the core system of Monkey Speak
            <para>
            This is where the triggers happen for the monkey speak lines
            </para></summary>
    </member>
    <member name="M:Monkeyspeak.Page.#ctor(Monkeyspeak.MonkeyspeakEngine)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Page</parameter>
          </include>
        </markup>
      </summary>
      <param name="engine">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>engine</parameter>
            <parameter>M:Monkeyspeak.Page.#ctor(Monkeyspeak.MonkeyspeakEngine)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="E:Monkeyspeak.Page.AfterTriggerHandled">
      <summary>
            Called after the Trigger's TriggerHandler is called. If there is
            no TriggerHandler for that Trigger then this event is not raised.
            </summary>
    </member>
    <member name="E:Monkeyspeak.Page.BeforeTriggerHandled">
      <summary>
            Called before the Trigger's TriggerHandler is called. If there
            is no TriggerHandler for that Trigger then this event is not raised.
            </summary>
    </member>
    <member name="M:Monkeyspeak.Page.CheckType(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.CheckType(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Monkeyspeak.Page.CheckType(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Page.CheckType(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Page.CompileToFile(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.CompileToFile(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="filePath">output file path</param>
      <exception cref="T:System.ArgumentException">
             Thrown when no file path is supplied
             </exception>
    </member>
    <member name="M:Monkeyspeak.Page.CompileToStream(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.CompileToStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </summary>
      <param name="stream">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>stream</parameter>
            <parameter>M:Monkeyspeak.Page.CompileToStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Page.Dispose">
      <summary>
            Public implementation of Dispose pattern callable by consumers.
            </summary>
    </member>
    <member name="M:Monkeyspeak.Page.Dispose(System.Boolean)">
      <summary>
            Protected implementation of Dispose pattern.
            </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Monkeyspeak.Page</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Monkeyspeak.Page.Engine">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Page.Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="E:Monkeyspeak.Page.Error">
      <summary>
            Called when an Exception is raised during execution
            </summary>
    </member>
    <member name="M:Monkeyspeak.Page.Execute(Monkeyspeak.TriggerCategory,System.Int32)">
      <summary>
            old style way to execute monkey speak causes
            </summary>
      <param name="cat">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cat</parameter>
            <parameter>M:Monkeyspeak.Page.Execute(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Monkeyspeak.Page.Execute(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Page.Execute(System.Int32[])">
      <summary>
            Executes a trigger block containing TriggerCategory.Cause with
            ID equal to <param name="id" /></summary>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Monkeyspeak.Page.Execute(System.Int32[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Page.Execute(System.Int32[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Page.ExecuteBlock(System.Int32[],Monkeyspeak.TriggerList)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.ExecuteBlock(System.Int32[],Monkeyspeak.TriggerList)</parameter>
          </include>
        </markup>
      </summary>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Monkeyspeak.Page.ExecuteBlock(System.Int32[],Monkeyspeak.TriggerList)</parameter>
          </include>
        </markup>
      </param>
      <param name="triggerBlock">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>triggerBlock</parameter>
            <parameter>M:Monkeyspeak.Page.ExecuteBlock(System.Int32[],Monkeyspeak.TriggerList)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Page.ExecuteBlock(System.Int32[],Monkeyspeak.TriggerList)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Page.GetTriggerDescriptions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.GetTriggerDescriptions</parameter>
          </include>
        </markup>
      </summary>
      <returns>
            IEnumerable of Triggers
            </returns>
    </member>
    <member name="M:Monkeyspeak.Page.GetVariable(System.String)">
      <summary>
            Gets a Variable with Name set to
            <paramref name="name" /><b>Throws Exception if Variable not found.</b></summary>
      <param name="name">
            The name of the Variable to retrieve
            </param>
      <returns>
            The variable found with the specified <paramref name="name" /> or
            throws Exception
            </returns>
    </member>
    <member name="M:Monkeyspeak.Page.HasVariable(System.String)">
      <summary>
            Checks the scope for the Variable with Name set to <paramref name="name" /></summary>
      <param name="name">
            The name of the Variable to retrieve
            </param>
      <returns>
            True on Variable found.
            <para>
            False if Variable not found.
            </para></returns>
    </member>
    <member name="M:Monkeyspeak.Page.HasVariable(System.String,Monkeyspeak.Variable@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.HasVariable(System.String,Monkeyspeak.Variable@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Monkeyspeak.Page.HasVariable(System.String,Monkeyspeak.Variable@)</parameter>
          </include>
        </markup>
      </param>
      <param name="var">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>var</parameter>
            <parameter>M:Monkeyspeak.Page.HasVariable(System.String,Monkeyspeak.Variable@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Page.HasVariable(System.String,Monkeyspeak.Variable@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Page.LoadDebugLibrary">
      <summary>
            Loads Monkeyspeak Debug Library into this Page
            <para>
            Used for Debug breakpoint insertion. Won't work without Debugger attached.
            </para></summary>
    </member>
    <member name="M:Monkeyspeak.Page.LoadIOLibrary">
      <summary>
            Loads Monkeyspeak IO Library into this Page
            <para>
            Used for File Input/Output operations
            </para></summary>
    </member>
    <member name="M:Monkeyspeak.Page.LoadLibrary(Monkeyspeak.Libraries.AbstractBaseLibrary)">
      <summary>
            Loads a <see cref="T:Monkeyspeak.Libraries.AbstractBaseLibrary" />
            into this Page
            </summary>
      <param name="lib"></param>
    </member>
    <member name="M:Monkeyspeak.Page.LoadLibraryFromAssembly(System.String)">
      <summary>
            Loads trigger handlers from a assembly dll file
            </summary>
      <param name="assemblyFile">
            The assembly in the local file system
            </param>
    </member>
    <member name="M:Monkeyspeak.Page.LoadMathLibrary">
      <summary>
            Loads Monkeyspeak Math Library into this Page
            <para>
            Used for Math operations (add, subtract, multiply, divide)
            </para></summary>
    </member>
    <member name="M:Monkeyspeak.Page.LoadStringLibrary">
      <summary>
            Loads Monkeyspeak String Library into this Page
            <para>
            Used for basic String operations
            </para></summary>
    </member>
    <member name="M:Monkeyspeak.Page.LoadSysLibrary">
      <summary>
            Loads Monkeyspeak Sys Library into this Page
            <para>
            Used for System operations involving the Environment or
            Operating System
            </para></summary>
    </member>
    <member name="M:Monkeyspeak.Page.LoadTimerLibrary">
      <summary>
            Loads Monkeyspeak Timer Library into this Page
            </summary>
    </member>
    <member name="M:Monkeyspeak.Page.OverWrite(System.Collections.Generic.List{Monkeyspeak.TriggerList})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.OverWrite(System.Collections.Generic.List{Monkeyspeak.TriggerList})</parameter>
          </include>
        </markup>
      </summary>
      <param name="blocks">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blocks</parameter>
            <parameter>M:Monkeyspeak.Page.OverWrite(System.Collections.Generic.List{Monkeyspeak.TriggerList})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.Trigger)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.Trigger)</parameter>
          </include>
        </markup>
      </summary>
      <param name="trigger">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>trigger</parameter>
            <parameter>M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.Trigger)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.TriggerCategory,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="cat">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cat</parameter>
            <parameter>M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Monkeyspeak.Page.RemoveTriggerHandler(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Page.Reset(System.Boolean)">
      <summary>
            Clears all Variables and optionally clears all TriggerHandlers
            from this Page.
            </summary>
      <param name="resetTriggerHandlers">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resetTriggerHandlers</parameter>
            <parameter>M:Monkeyspeak.Page.Reset(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Monkeyspeak.Page.Scope">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Page.Scope</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Page.SetTriggerHandler(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler,System.String)">
      <summary>
            Assigns the TriggerHandler to <paramref name="trigger" /></summary>
      <param name="trigger">
        <see cref="T:Monkeyspeak.Trigger" />
      </param>
      <param name="handler">
        <see cref="T:Monkeyspeak.TriggerHandler" />
      </param>
      <param name="description">
            optional description of the trigger, normally the human readable
            form of the trigger
            <para>
            Example: "(0:1) when someone says something,"
            </para></param>
    </member>
    <member name="M:Monkeyspeak.Page.SetTriggerHandler(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)">
      <summary>
            Assigns the TriggerHandler to a trigger with
            <paramref name="category" /> and <paramref name="id" /></summary>
      <param name="category"></param>
      <param name="id"></param>
      <param name="handler"></param>
      <param name="description"></param>
    </member>
    <member name="M:Monkeyspeak.Page.SetVariable(System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.SetVariable(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Monkeyspeak.Page.SetVariable(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Monkeyspeak.Page.SetVariable(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isConstant">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isConstant</parameter>
            <parameter>M:Monkeyspeak.Page.SetVariable(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Page.SetVariable(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Page.Size">
      <summary>
            Returns the Trigger count on this Page.
            </summary>
      <returns></returns>
    </member>
    <member name="F:Monkeyspeak.Page.syncObj">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.Page.syncObj</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="E:Monkeyspeak.Page.TriggerAdded">
      <summary>
            Called when a Trigger and TriggerHandler is added to the Page
            </summary>
    </member>
    <member name="M:Monkeyspeak.Page.Write(System.Collections.Generic.List{Monkeyspeak.TriggerList})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Page.Write(System.Collections.Generic.List{Monkeyspeak.TriggerList})</parameter>
          </include>
        </markup>
      </summary>
      <param name="blocks">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>blocks</parameter>
            <parameter>M:Monkeyspeak.Page.Write(System.Collections.Generic.List{Monkeyspeak.TriggerList})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.Parser">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.Parser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Parser.#ctor(Monkeyspeak.MonkeyspeakEngine,Monkeyspeak.ILexer)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Parser</parameter>
          </include>
        </markup>
      </summary>
      <param name="engine">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>engine</parameter>
            <parameter>M:Monkeyspeak.Parser.#ctor(Monkeyspeak.MonkeyspeakEngine,Monkeyspeak.ILexer)</parameter>
          </include>
        </markup>
      </param>
      <param name="lexer">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lexer</parameter>
            <parameter>M:Monkeyspeak.Parser.#ctor(Monkeyspeak.MonkeyspeakEngine,Monkeyspeak.ILexer)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Parser.IntParse(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Parser.IntParse(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Monkeyspeak.Parser.IntParse(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Parser.IntParse(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Parser.Parse(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Parser.Parse(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Monkeyspeak.Parser.Parse(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Parser.Parse(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.ReflectionHelper">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.ReflectionHelper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.ReflectionHelper.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.ReflectionHelper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.ReflectionHelper.GetAllAttributesFromMethod``1(System.Reflection.MethodInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllAttributesFromMethod``1(System.Reflection.MethodInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="methodInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>methodInfo</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllAttributesFromMethod``1(System.Reflection.MethodInfo)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllAttributesFromMethod``1(System.Reflection.MethodInfo)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllAttributesFromMethod``1(System.Reflection.MethodInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.ReflectionHelper.GetAllMethods(System.Type[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllMethods(System.Type[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllMethods(System.Type[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllMethods(System.Type[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.ReflectionHelper.GetAllTypes(System.Reflection.Assembly)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllTypes(System.Reflection.Assembly)</parameter>
          </include>
        </markup>
      </summary>
      <param name="assembly">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>assembly</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllTypes(System.Reflection.Assembly)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.GetAllTypes(System.Reflection.Assembly)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.ReflectionHelper.TryLoad(System.String,System.Reflection.Assembly@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.TryLoad(System.String,System.Reflection.Assembly@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="assemblyFile">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>assemblyFile</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.TryLoad(System.String,System.Reflection.Assembly@)</parameter>
          </include>
        </markup>
      </param>
      <param name="asm">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>asm</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.TryLoad(System.String,System.Reflection.Assembly@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.ReflectionHelper.TryLoad(System.String,System.Reflection.Assembly@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Token">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.Token</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Token.#ctor(Monkeyspeak.TokenType,System.String,Monkeyspeak.TokenPosition)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Token</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Monkeyspeak.Token.#ctor(Monkeyspeak.TokenType,System.String,Monkeyspeak.TokenPosition)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Monkeyspeak.Token.#ctor(Monkeyspeak.TokenType,System.String,Monkeyspeak.TokenPosition)</parameter>
          </include>
        </markup>
      </param>
      <param name="position">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>position</parameter>
            <parameter>M:Monkeyspeak.Token.#ctor(Monkeyspeak.TokenType,System.String,Monkeyspeak.TokenPosition)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Monkeyspeak.Token.Position">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Token.Position</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Token.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Token.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Token.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Token.Type">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Token.Type</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.Token.Value">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Token.Value</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.TokenDefinition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TokenDefinition</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TokenDefinition</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex)</parameter>
          </include>
        </markup>
      </param>
      <param name="regex">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>regex</parameter>
            <parameter>M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TokenDefinition</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="regex">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>regex</parameter>
            <parameter>M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isIgnored">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isIgnored</parameter>
            <parameter>M:Monkeyspeak.TokenDefinition.#ctor(Monkeyspeak.TokenType,System.Text.RegularExpressions.Regex,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Monkeyspeak.TokenDefinition.IsIgnored">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TokenDefinition.IsIgnored</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.TokenDefinition.Regex">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TokenDefinition.Regex</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.TokenDefinition.Type">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TokenDefinition.Type</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.TokenPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TokenPosition</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TokenPosition.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TokenPosition</parameter>
          </include>
        </markup>
      </summary>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Monkeyspeak.TokenPosition.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Monkeyspeak.TokenPosition.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="column">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>column</parameter>
            <parameter>M:Monkeyspeak.TokenPosition.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Monkeyspeak.TokenPosition.Column">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TokenPosition.Column</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.TokenPosition.Index">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TokenPosition.Index</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.TokenPosition.Line">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TokenPosition.Line</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.TokenType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TokenType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.Trigger">
      <summary>
            Monkey Speak Trigger
            <para>
            ( <see cref="T:Monkeyspeak.TriggerCategory" />, <see cref="T:System.Int32">Id</see></para></summary>
    </member>
    <member name="M:Monkeyspeak.Trigger.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Trigger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Trigger.#ctor(Monkeyspeak.TriggerCategory,System.Int32)">
      <summary>
            Establish a new trigger
            </summary>
      <param name="cat">
        <see cref="T:Monkeyspeak.TriggerCategory" />
      </param>
      <param name="id">
            Line ID
            </param>
    </member>
    <member name="P:Monkeyspeak.Trigger.Category">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Trigger.Category</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Trigger.Clone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Trigger.Clone</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Trigger.Clone</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Monkeyspeak.Trigger.contents">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.Trigger.contents</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.Trigger.Contents">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Trigger.Contents</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.Trigger.Description">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Trigger.Description</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Trigger.Equals(Monkeyspeak.Trigger)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Trigger.Equals(Monkeyspeak.Trigger)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:Monkeyspeak.Trigger.Equals(Monkeyspeak.Trigger)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Trigger.Equals(Monkeyspeak.Trigger)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Trigger.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Trigger.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:Monkeyspeak.Trigger.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Trigger.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Trigger.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Trigger.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Trigger.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Trigger.Id">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Trigger.Id</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Trigger.ToString">
      <summary>
            Display the line id format (#:#)
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Trigger.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.TriggerAddedEventHandler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TriggerAddedEventHandler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.TriggerCategory">
      <summary>
            Monkey Speak Trigger Catagories
            </summary>
    </member>
    <member name="F:Monkeyspeak.TriggerCategory.Cause">
      <summary>
            A trigger defined with a 0
            <para>
            Example: (0:1) when someone says something,
            </para></summary>
    </member>
    <member name="F:Monkeyspeak.TriggerCategory.Condition">
      <summary>
            A trigger defined with a 1
            <para>
            Example: (1:2) and they moved # units left,
            </para></summary>
    </member>
    <member name="F:Monkeyspeak.TriggerCategory.Effect">
      <summary>
            A trigger defined with a 5
            <para>
            Example: (5:1) print {Hello World} to the console.
            </para></summary>
    </member>
    <member name="F:Monkeyspeak.TriggerCategory.Undefined">
      <summary>
            A trigger that was not defined. You should never encounter this
            if you do then something isn't quite right.
            </summary>
    </member>
    <member name="T:Monkeyspeak.TriggerHandledEventHandler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TriggerHandledEventHandler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.TriggerHandler">
      <summary>
            Used for handling triggers at runtime.
            </summary>
      <param name="reader"></param>
      <returns>
            True = Continue to the Next Trigger, False = Stop executing current TriggerList
            </returns>
    </member>
    <member name="T:Monkeyspeak.TriggerHandlerAttribute">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TriggerHandlerAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerHandlerAttribute.#ctor(Monkeyspeak.TriggerCategory,System.Int32,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerHandlerAttribute</parameter>
          </include>
        </markup>
      </summary>
      <param name="category">
            Trigger Category
            </param>
      <param name="id">
            Trigger ID
            </param>
      <param name="description">
            Trigger Description
            </param>
    </member>
    <member name="F:Monkeyspeak.TriggerHandlerAttribute.owner">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.TriggerHandlerAttribute.owner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerHandlerAttribute.Register(Monkeyspeak.Page)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.TriggerHandlerAttribute.Register(Monkeyspeak.Page)</parameter>
          </include>
        </markup>
      </summary>
      <param name="page">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>page</parameter>
            <parameter>M:Monkeyspeak.TriggerHandlerAttribute.Register(Monkeyspeak.Page)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.TriggerHandlerErrorEvent">
      <summary>
            Event for any errors that occur during execution If not assigned
            Exceptions will be thrown.
            </summary>
      <param name="trigger"></param>
      <param name="ex"></param>
    </member>
    <member name="T:Monkeyspeak.TriggerList">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TriggerList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerList.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerList.#ctor(Monkeyspeak.Trigger[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerList</parameter>
          </include>
        </markup>
      </summary>
      <param name="triggers">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>triggers</parameter>
            <parameter>M:Monkeyspeak.TriggerList.#ctor(Monkeyspeak.Trigger[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TriggerList.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerList</parameter>
          </include>
        </markup>
      </summary>
      <param name="initialCapacity">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>initialCapacity</parameter>
            <parameter>M:Monkeyspeak.TriggerList.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TriggerList.HasTrigger(Monkeyspeak.TriggerCategory,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.TriggerList.HasTrigger(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="cat">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cat</parameter>
            <parameter>M:Monkeyspeak.TriggerList.HasTrigger(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Monkeyspeak.TriggerList.HasTrigger(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.TriggerList.HasTrigger(Monkeyspeak.TriggerCategory,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.TriggerReader">
      <summary>
            A Reader that is used to get Variables, Strings, and Numbers from Triggers
            </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.#ctor(Monkeyspeak.Page)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerReader</parameter>
          </include>
        </markup>
      </summary>
      <param name="page">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>page</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.#ctor(Monkeyspeak.Page)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.#ctor(Monkeyspeak.Page,Monkeyspeak.Trigger)">
      <summary>
            A Reader that is used to get Variables, Strings, and Numbers
            from Triggers
            </summary>
      <param name="page">
        <see cref="T:Monkeyspeak.Page" />
      </param>
      <param name="trigger">
        <see cref="T:Monkeyspeak.Trigger" />
      </param>
    </member>
    <member name="P:Monkeyspeak.TriggerReader.Page">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TriggerReader.Page</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.PeekNumber">
      <summary>
            Peeks at the next value
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.PeekNumber</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.PeekString">
      <summary>
            Peeks at the next value
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.PeekString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.PeekVariable">
      <summary>
            Peeks at the next value
            </summary>
      <returns>
            the current peek <see cref="T:Monkeyspeak.Variable" /></returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.ReadNumber">
      <summary>
            Reads the next Double available, throws TriggerReaderException
            on failure
            </summary>
      <returns>
        <see cref="T:System.Double" />
      </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.ReadString(System.Boolean)">
      <summary>
            Reads the next String, throws TriggerReaderException on failure
            </summary>
      <param name="processVariables">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>processVariables</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.ReadString(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <see cref="T:System.String" />
      </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.ReadVariable">
      <summary>
            Reads the next Variable available, throws TriggerReaderException
            on failure
            </summary>
      <returns>
            Variable
            </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.ReadVariable(System.Boolean)">
      <summary>
            Reads the next Variable available, throws TriggerReaderException
            on failure
            </summary>
      <param name="addIfNotExist">
            Add the Variable if it doesn't exist and return that Variable
            with a Value equal to null.
            </param>
      <returns>
            Variable
            </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.Reset">
      <summary>
            Resets the reader's indexes to 0
            </summary>
    </member>
    <member name="P:Monkeyspeak.TriggerReader.Trigger">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TriggerReader.Trigger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.TriggerReader.TriggerCategory">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TriggerReader.TriggerCategory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.TriggerReader.TriggerId">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.TriggerReader.TriggerId</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.TryReadNumber(System.Double@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.TryReadNumber(System.Double@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="number">
        <see cref="T:System.Double" />
      </param>
      <returns>
            True on sucess
            </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.TryReadString(System.String@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.TryReadString(System.String@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="str">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>str</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.TryReadString(System.String@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.TriggerReader.TryReadString(System.String@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.TriggerReader.TryReadVariable(Monkeyspeak.Variable@)">
      <summary>
            Trys to read the next Variable available
            </summary>
      <param name="var">
            Variable is assigned on success
            </param>
      <returns>
            bool on success
            </returns>
    </member>
    <member name="T:Monkeyspeak.TriggerReaderException">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TriggerReaderException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerReaderException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerReaderException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TriggerReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerReaderException</parameter>
          </include>
        </markup>
      </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:Monkeyspeak.TriggerReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Monkeyspeak.TriggerReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TriggerReaderException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerReaderException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.TriggerReaderException.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TriggerReaderException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TriggerReaderException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.TriggerReaderException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
      <param name="inner">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inner</parameter>
            <parameter>M:Monkeyspeak.TriggerReaderException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.TypeNotSupportedException">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.TypeNotSupportedException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TypeNotSupportedException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TypeNotSupportedException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.TypeNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TypeNotSupportedException</parameter>
          </include>
        </markup>
      </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:Monkeyspeak.TypeNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Monkeyspeak.TypeNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TypeNotSupportedException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TypeNotSupportedException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.TypeNotSupportedException.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.TypeNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.TypeNotSupportedException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.TypeNotSupportedException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
      <param name="inner">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inner</parameter>
            <parameter>M:Monkeyspeak.TypeNotSupportedException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.Variable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.Variable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Variable.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Variable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Variable.#ctor(System.String,System.Object)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Variable</parameter>
          </include>
        </markup>
      </summary>
      <param name="Name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Name</parameter>
            <parameter>M:Monkeyspeak.Variable.#ctor(System.String,System.Object)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Monkeyspeak.Variable.#ctor(System.String,System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Variable.#ctor(System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Variable</parameter>
          </include>
        </markup>
      </summary>
      <param name="Name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Name</parameter>
            <parameter>M:Monkeyspeak.Variable.#ctor(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Monkeyspeak.Variable.#ctor(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="constant">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>constant</parameter>
            <parameter>M:Monkeyspeak.Variable.#ctor(System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Variable.#cctor">
      <summary>
        <markup>
          <include item="SMCAutoDocStaticConstructor">
            <parameter>Monkeyspeak.Variable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Variable.CheckType(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.CheckType(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="_value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>_value</parameter>
            <parameter>M:Monkeyspeak.Variable.CheckType(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.CheckType(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Variable.Clone(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.Clone(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="asConstant">
            Clone as Constant
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.Clone(System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Variable.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:Monkeyspeak.Variable.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Variable.ForceAssignValue(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.ForceAssignValue(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="_value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>_value</parameter>
            <parameter>M:Monkeyspeak.Variable.ForceAssignValue(System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Variable.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Variable.IsConstant">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Variable.IsConstant</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.Variable.Name">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Variable.Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Monkeyspeak.Variable.NoValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.Variable.NoValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Variable.op_Equality(Monkeyspeak.Variable,Monkeyspeak.Variable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Equality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="varA">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varA</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Equality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </param>
      <param name="varB">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varB</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Equality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Equality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Variable.op_Inequality(Monkeyspeak.Variable,Monkeyspeak.Variable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Inequality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="varA">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varA</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Inequality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </param>
      <param name="varB">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varB</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Inequality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.op_Inequality(Monkeyspeak.Variable,Monkeyspeak.Variable)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Variable.ToString">
      <summary>
            Returns a const identifier if the variable is constant followed
            by name,
            <para>
            otherwise just the name is returned.
            </para></summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Variable.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Variable.Value">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Variable.Value</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Monkeyspeak.VariableIsConstantException">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.VariableIsConstantException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.VariableIsConstantException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.VariableIsConstantException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.VariableIsConstantException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.VariableIsConstantException</parameter>
          </include>
        </markup>
      </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:Monkeyspeak.VariableIsConstantException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Monkeyspeak.VariableIsConstantException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.VariableIsConstantException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.VariableIsConstantException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.VariableIsConstantException.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.VariableIsConstantException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.VariableIsConstantException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Monkeyspeak.VariableIsConstantException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
      <param name="inner">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inner</parameter>
            <parameter>M:Monkeyspeak.VariableIsConstantException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.lexical.AbstractParser">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.lexical.AbstractParser</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.lexical.AbstractParser.#ctor(Monkeyspeak.MonkeyspeakEngine,Monkeyspeak.ILexer)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.lexical.AbstractParser</parameter>
          </include>
        </markup>
      </summary>
      <param name="engine">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>engine</parameter>
            <parameter>M:Monkeyspeak.lexical.AbstractParser.#ctor(Monkeyspeak.MonkeyspeakEngine,Monkeyspeak.ILexer)</parameter>
          </include>
        </markup>
      </param>
      <param name="lexer">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lexer</parameter>
            <parameter>M:Monkeyspeak.lexical.AbstractParser.#ctor(Monkeyspeak.MonkeyspeakEngine,Monkeyspeak.ILexer)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="F:Monkeyspeak.lexical.AbstractParser.Engine">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.lexical.AbstractParser.Engine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Monkeyspeak.lexical.AbstractParser.Lexer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.lexical.AbstractParser.Lexer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.lexical.AbstractParser.Parse(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.lexical.AbstractParser.Parse(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Monkeyspeak.lexical.AbstractParser.Parse(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.lexical.AbstractParser.Parse(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.lexical.Compiler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Monkeyspeak.lexical.Compiler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.lexical.Compiler.#ctor(Monkeyspeak.MonkeyspeakEngine)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.lexical.Compiler</parameter>
          </include>
        </markup>
      </summary>
      <param name="engine">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>engine</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.#ctor(Monkeyspeak.MonkeyspeakEngine)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.lexical.Compiler.CompileToStream(System.Collections.Generic.List{Monkeyspeak.TriggerList},System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.CompileToStream(System.Collections.Generic.List{Monkeyspeak.TriggerList},System.IO.Stream)</parameter>
          </include>
        </markup>
      </summary>
      <param name="triggers">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>triggers</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.CompileToStream(System.Collections.Generic.List{Monkeyspeak.TriggerList},System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
      <param name="stream">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>stream</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.CompileToStream(System.Collections.Generic.List{Monkeyspeak.TriggerList},System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.lexical.Compiler.DecompileFromStream(System.IO.Stream)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.DecompileFromStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </summary>
      <param name="stream">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>stream</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.DecompileFromStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.lexical.Compiler.DecompileFromStream(System.IO.Stream)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.lexical.Compiler.Version">
      <summary>
            Compiler version number
            </summary>
    </member>
    <member name="T:Monkeyspeak.Libraries.AbstractBaseLibrary">
      <summary>
            Base Library to build Monkey Speak Libraries on
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.#ctor">
      <summary>
            Base abstract class for Monkeyspeak Libraries
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler,System.String)">
      <summary>
            Registers a Trigger to the TriggerHandler with optional description
            </summary>
      <param name="trigger">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>trigger</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="handler">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handler</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="description">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>description</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)">
      <summary>
            Registers a Trigger to the TriggerHandler with optional description
            </summary>
      <param name="cat">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cat</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="handler">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handler</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="description">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>description</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="F:Monkeyspeak.Libraries.AbstractBaseLibrary.descriptions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.Libraries.AbstractBaseLibrary.descriptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Monkeyspeak.Libraries.AbstractBaseLibrary.handlers">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Monkeyspeak.Libraries.AbstractBaseLibrary.handlers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.RaiseError(System.String)">
      <summary>
            Raises a MonkeyspeakException
            </summary>
      <param name="reason">
            Reason for the error
            </param>
    </member>
    <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.Register(Monkeyspeak.Page)">
      <summary>
            Registers this library to a Page
            </summary>
      <param name="page">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>page</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.Register(Monkeyspeak.Page)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.ToString">
      <summary>
            Builds a string representation of the descriptions of each trigger.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.AbstractBaseLibrary.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Libraries.Debug">
      <summary>
            Provides IDE Debug MonkeySpeak Lines
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Debug.#ctor">
      <summary>
            Initialize Cause and effect
            <para><see cref="M:Monkeyspeak.Libraries.Debug.WhenBreakpointHit(Monkeyspeak.TriggerReader)">(0:10000)</see> $amp; <see cref="M:Monkeyspeak.Libraries.Debug.CreateBreakPoint(Monkeyspeak.TriggerReader)">(5:10000)</see></para></summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Debug.CreateBreakPoint(Monkeyspeak.TriggerReader)">
      <summary>
            (5:10000) create a debug breakpoint here,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Debug.CreateBreakPoint(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Debug.WhenBreakpointHit(Monkeyspeak.TriggerReader)">
      <summary>
            (0:10000) when a debug breakpoint is hit
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Debug.WhenBreakpointHit(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Libraries.IO">
      <summary>
            IO Monkey Speak Library
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Libraries.IO</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.AppendToFile(Monkeyspeak.TriggerReader)">
      <summary>
            (5:200) append {...} to file {...}.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.AppendToFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.CanReadFile(Monkeyspeak.TriggerReader)">
      <summary>
            (1:202) and the file {...} can be read from,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.CanReadFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.CanWriteFile(Monkeyspeak.TriggerReader)">
      <summary>
            (1:203) and the file {...} can be written to,"
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.CanWriteFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.CreateFile(Monkeyspeak.TriggerReader)">
      <summary>
            (5:203) create file {...}.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.CreateFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.DeleteFile(Monkeyspeak.TriggerReader)">
      <summary>
            (5:202) delete file {...}.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.DeleteFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.FileExists(Monkeyspeak.TriggerReader)">
      <summary>
            (1:200) and the file {...} exists,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.FileExists(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.FileNotExists(Monkeyspeak.TriggerReader)">
      <summary>
            (1:201) and the file {...} does not exist,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.FileNotExists(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.IO.ReadFileIntoVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:201) read from file {...} and put it into variable %Variable.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.IO.ReadFileIntoVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Libraries.Math">
      <summary>
            Monkey Speak Math Library
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Libraries.Math</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.AddToVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:150) take variable %Variable and add # to it.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.AddToVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.DivideByVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:153) take variable %Variable and divide it by #.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.DivideByVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.MultiplyByVariable(Monkeyspeak.TriggerReader)">
      <summary>
            "(5:152) take variable %Variable and multiply it by #.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.MultiplyByVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.SubtractFromVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:151) take variable %Variable and subtract # from it.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.SubtractFromVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.VariableGreaterThan(Monkeyspeak.TriggerReader)">
      <summary>
            (1:150) and variable %Variable is greater than #,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.VariableGreaterThan(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.VariableGreaterThanOrEqual(Monkeyspeak.TriggerReader)">
      <summary>
            (1:151) and variable %Variable is greater than or equal to #,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.VariableGreaterThanOrEqual(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.VariableLessThan(Monkeyspeak.TriggerReader)">
      <summary>
            (1:152) and variable %Variable is less than #,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.VariableLessThan(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Math.VariableLessThanOrEqual(Monkeyspeak.TriggerReader)">
      <summary>
            (1:153) and variable %Variable is less than or equal to #,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Math.VariableLessThanOrEqual(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Libraries.StringOperations">
      <summary>
            Monkey Speak String Operations Library
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Libraries.StringOperations</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.AddStringToVar(Monkeyspeak.TriggerReader)">
      <summary>
            (5:404) with string {...} add it to string variable %Variable.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.StringOperations.AddStringToVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.GetWordCountIntoVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:403) with string {...} get word count and put it into
            variable %Variable.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.StringOperations.GetWordCountIntoVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.StringArrayEntryCopy(Monkeyspeak.TriggerReader)">
      <summary>
            (5:400) use string {...} as an array and copy entry # of it into
            variable %Variable.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.StringOperations.StringArrayEntryCopy(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.StringArrayEntryRemove(Monkeyspeak.TriggerReader)">
      <summary>
            (5:402) use string variable %Variable as an array and remove
            entry # of it.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.StringOperations.StringArrayEntryRemove(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.StringArrayEntrySet(Monkeyspeak.TriggerReader)">
      <summary> (5:401) use string variable %Variable as an array and
            set entry # of it to {...}. 
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.StringOperations.StringArrayEntrySet(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.StringOperations.StringLength(Monkeyspeak.TriggerReader)">
      <summary>
            (5:405) take string {...} and put its character length in
            variable %Variable.
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.StringOperations.StringLength(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Libraries.Sys">
      <summary>
            Monkey Speak Sys library
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Libraries.Sys</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.GetEnvVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:103) get the environment variable named {...} and put it into
            %, (ex: PATH)
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.GetEnvVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.GetEnvVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.IsVariableDefined(Monkeyspeak.TriggerReader)">
      <summary>
            (1:100) and variable % is defined,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableDefined(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableDefined(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.IsVariableEqualToNumberOrVar(Monkeyspeak.TriggerReader)">
      <summary>
            (1:102) and variable % equals #,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableEqualToNumberOrVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableEqualToNumberOrVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.IsVariableEqualToString(Monkeyspeak.TriggerReader)">
      <summary>
            (1:104) and variable % equals {...},
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableEqualToString(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableEqualToString(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.IsVariableNotDefined(Monkeyspeak.TriggerReader)">
      <summary>
            (1:101) and variable % is not defined,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableNotDefined(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableNotDefined(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.IsVariableNotEqualToNumberOrVar(Monkeyspeak.TriggerReader)">
      <summary>
            (1:103) and variable % does not equal #,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableNotEqualToNumberOrVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableNotEqualToNumberOrVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.IsVariableNotEqualToString(Monkeyspeak.TriggerReader)">
      <summary>
            (1:105) and variable % does not equal {...},
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableNotEqualToString(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.IsVariableNotEqualToString(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.LoadLibraryFromFile(Monkeyspeak.TriggerReader)">
      <summary>
            (5:110) load library from file {...}. (example Monkeyspeak.dll)
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.LoadLibraryFromFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.LoadLibraryFromFile(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.PrintToConsole(Monkeyspeak.TriggerReader)">
      <summary>
            (5:102) print {...} to the console.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.PrintToConsole(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.PrintToConsole(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.RaiseAnError(Monkeyspeak.TriggerReader)">
      <summary>
            (5:105) raise an error.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.RaiseAnError(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.RaiseAnError(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.RandomValueToVar(Monkeyspeak.TriggerReader)">
      <summary>
            (5:104) create random number and put it into variable %.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.RandomValueToVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.RandomValueToVar(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.SetVariableToNumberOrVariable(Monkeyspeak.TriggerReader)">
      <summary>
            (5:101) set variable % to #.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.SetVariableToNumberOrVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.SetVariableToNumberOrVariable(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.SetVariableToString(Monkeyspeak.TriggerReader)">
      <summary>
            (5:100) set variable % to {...}.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.SetVariableToString(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.SetVariableToString(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.VariableIsConstant(Monkeyspeak.TriggerReader)">
      <summary>
            (1:106) and variable % is constant,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.VariableIsConstant(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.VariableIsConstant(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Sys.VariableIsNotConstant(Monkeyspeak.TriggerReader)">
      <summary>
            (1:107) and variable % is not constant,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.VariableIsNotConstant(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Sys.VariableIsNotConstant(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Monkeyspeak.Libraries.TimerInfo">
      <summary>
            A TimerInfo object contains Timer and Page Owner. Timer is not
            started from a TimerInfo constructor.
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Monkeyspeak.Libraries.TimerInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.#ctor(Monkeyspeak.Page,System.Double,System.Double)">
      <summary>
            T
            </summary>
      <param name="owner">
            Page owner
            </param>
      <param name="interval">
            cycle time in seconds
            </param>
      <param name="Id">
            MonkeySpeak ID if the timer
            </param>
    </member>
    <member name="P:Monkeyspeak.Libraries.TimerInfo.CurrentTimer">
      <summary>
            Current Triggering timer
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.Dispose">
      <summary>
            Implement IDisposable
            </summary>
    </member>
    <member name="P:Monkeyspeak.Libraries.TimerInfo.Disposed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Libraries.TimerInfo.Disposed</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.Disposing(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Disposing(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>disposing</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Disposing(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Libraries.TimerInfo.ID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Libraries.TimerInfo.ID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.Libraries.TimerInfo.Interval">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Libraries.TimerInfo.Interval</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.op_Equality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Equality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="timer1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timer1</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Equality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="timer2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timer2</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Equality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Equality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.op_Inequality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Inequality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="timer1">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timer1</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Inequality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="timer2">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timer2</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Inequality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.op_Inequality(Monkeyspeak.Libraries.TimerInfo,Monkeyspeak.Libraries.TimerInfo)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Monkeyspeak.Libraries.TimerInfo.Owner">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Libraries.TimerInfo.Owner</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Monkeyspeak.Libraries.TimerInfo.Timer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Monkeyspeak.Libraries.TimerInfo.Timer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.TimerInfo.Timer_Elapsed(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Timer_Elapsed(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="sender">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sender</parameter>
            <parameter>M:Monkeyspeak.Libraries.TimerInfo.Timer_Elapsed(System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Monkeyspeak.Libraries.Timers">
      <summary>
            Reciporcating Timers for Monkey Speak
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.#ctor">
      <summary>
            Default Timer Library. Call static method Timers.DestroyTimers()
            when your application closes.
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.#cctor">
      <summary>
        <markup>
          <include item="SMCAutoDocStaticConstructor">
            <parameter>Monkeyspeak.Libraries.Timers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.AndTimerIsNotRunning(Monkeyspeak.TriggerReader)">
      <summary>
            (1:301) and timer # is not running,
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.AndTimerIsNotRunning(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.AndTimerIsNotRunning(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.AndTimerIsRunning(Monkeyspeak.TriggerReader)">
      <summary>
            (1:300) and timer # is running,"
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.AndTimerIsRunning(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.AndTimerIsRunning(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.CreateTimer(Monkeyspeak.TriggerReader)">
      <summary>
            (5:300) create timer # to go off every # second(s).
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.CreateTimer(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.CreateTimer(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.DestroyTimers">
      <summary>
            Closes and removes all Timers
            </summary>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.StopTimer(Monkeyspeak.TriggerReader)">
      <summary>
            (5:301) stop timer #.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.StopTimer(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.StopTimer(Monkeyspeak.TriggerReader)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.TryGetTimerFrom(Monkeyspeak.TriggerReader,Monkeyspeak.Libraries.TimerInfo@)">
      <summary>
            Tried to get a timer by <see cref="T:Monkeyspeak.Variable" /> or by double
            </summary>
      <param name="reader"></param>
      <param name="timerInfo"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Monkeyspeak.Libraries.Timers.TryGetTimerFrom(Monkeyspeak.TriggerReader,Monkeyspeak.Libraries.TimerInfo@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.WhenAnyTimerGoesOff(Monkeyspeak.TriggerReader)">
      <summary>
            (0:301) When any timer goes off,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
            when any timer goes off
            </returns>
    </member>
    <member name="M:Monkeyspeak.Libraries.Timers.WhenTimerGoesOff(Monkeyspeak.TriggerReader)">
      <summary>
            (0:300) When timer # goes off,
            </summary>
      <param name="reader">
        <see cref="T:Monkeyspeak.TriggerReader" />
      </param>
      <returns>
            when timer # goes off
            </returns>
    </member>
  </members>
</doc>