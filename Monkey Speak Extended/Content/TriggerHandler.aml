<?xml version="1.0" encoding="utf-8"?>
<topic id="0edd4b74-20a9-441b-a7df-7d571d2dc63c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
        TriggerHandlers handle the logic associated with each Trigger.
        They take a delegate that takes one parameter TriggerReader.
      </para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Add one or more sections with content</para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.-->
      <sections>
        <section address="BriefIntro">
          <title>Brief Intro to TriggerReader</title>
          <content>
            <para>
              TriggerReader is like BinaryReader. TriggerReader
              is used in retrieving the values associated with a
              Trigger. This is done through the 3 main Read* methods.
              The methods reader.PeekString, reader.PeekNumber or
              reader.PeekVariable return boolean if the next value is
              the desired type. Using those methods help avoid the
              Exception that is thrown if you try to read a value that
              doesn't exist.
            </para>
            <para>
              In this example "trigger" points to a Trigger (5:999)
              set %testVariable to 123 and print {This is a String}.
            </para>
            <code language="cs">
              TriggerReader reader = new TriggerReader(trigger);
              Monkeyspeak.Variable varValue = reader.ReadVariable(); // This would return a reference to %testVariable
              double numValue = reader.ReadNumber(); // This would return 123
              string stringValue = reader.ReadString(); // This would return "This is a String"
            </code>
            <para>
              Trying to read these values out of order would cause an exception to be raised.
              This allows you to have some actual structure when processing Triggers.
            </para>
            <para>
              For example if you add a 0, "Hello World", and %userName* to your trigger. You would read it like this:
            </para>
            <code language="cs">
              triggerReader.ReadNumber(); // Number is 0
              triggerReader.ReadString(); // String is "Hello World"
              triggerReader.ReadVariable(); // Variable is %userName
            </code>
            <para>
              If however you decided to try to read the first value 0 as a String
            </para>
            <code launguage="cs">
              triggerReader.ReadString(); // TriggerReaderException would be thrown here.
            </code>
          </content>
        </section>
        <section address="SubSection2">
          <title>Sub-section 2</title>
          <content>
            <para>Sub-section content.</para>
          </content>
        </section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID" />
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>