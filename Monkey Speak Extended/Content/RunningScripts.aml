<?xml version="1.0" encoding="utf-8"?>
<topic id="5967b13b-41da-4051-ba01-43648cf28dea" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Required introduction</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="">
      <title></title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.-->
      <sections>
        <section address="RunSmallScripts">
          <title>Running Many Small Scripts</title>
          <content>
            <para>Running many small scripts is faster then loading a BIG combined script. This is because the engine returns faster loading a small script and can move on to the next. If the engine has to sit there and load a BIG script its going to hang until it completes that action.</para>
            <para>
              If you HAVE to use BIG scripts or want to combine scripts into one because that is what your design strategy needs I understand and I got the solution.
            </para>
          </content>
        </section>
        <section address="CombineScripts">
          <title>Combining Scripts</title>
          <content>
            <para>Monkeyspeak gives you 2 methods to load a script into another existing Page.</para>
            <para>These are:</para>
            <code language="cs">
              LoadFromString(ref Page existingPage, string chunk)
              LoadFromStream(ref Page existingPage, Stream stream)
            </code>
            <para>
              Combining scripts can lead to hanging (see <link xlink:href="#RunSmallScripts">Running Many Small Scripts</link>) but if you compile them then later you can load them a lot faster many times each.
            </para>
          </content>
        </section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID" />
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>