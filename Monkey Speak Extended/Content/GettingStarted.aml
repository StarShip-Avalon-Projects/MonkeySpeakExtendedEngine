<?xml version="1.0" encoding="utf-8"?>
<topic id="51573500-5c8e-4d79-aad7-5d99bf6c2fe1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
      MonkeyspeakEngine parses a Monkeyspeak script and returns a Page
Page handles the TriggerHandlers added
TriggerHandler delegates that are assigned to Triggers and Executed by Page(s)
Trigger similar to "functions", are used to store information used in the execution of a TriggerHandler
</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Definitions</title>
      <content>
        <autoOutline /> 
        <para>
        MonkeyspeakEngine parses a Monkeyspeak script and returns a Page
        </para>
        <para>
Page handles the TriggerHandlers added
</para>
<para>
TriggerHandler delegates that are assigned to Triggers and Executed by Page(s)
</para>
<para>
Trigger similar to "functions", are used to store information used in the execution of a TriggerHandler
</para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible. -->
      <sections>
          <section address="GettingStarted">
              <title>Getting Started</title>
              <content>
                  <para>Start your engines! Or just ONE engine is all you need. But you could have more if you wanted.</para>
             <para>Everything starts with the MonkeyspeakEngine object. Lets get started and make one.</para>
            <code language="cs" >
			Monkeyspeak.MonkeyspeakEngine engine = new Monkeyspeak.MonkeyspeakEngine();
            </code>
            <para>What we are doing here is creating a MonkeyspeakEngine instance and that is all.</para>
            <para>MonkeyspeakEngine has Options that let you configure some of the symbols in the language itself!</para>
            <para>For example if I wanted to make all Strings start and end with " and " instead of the Default { and }</para>
            <code language="cs">
            engine.Options.StringBegin = '\"';
			engine.Options.StringEnd = '\"';
            </code>
            <para>Or I wanted to make the variable declaration symbol % become &amp;</para>
            <code language="cs" >
			engine.Options.VariableSymbol = '&amp;';
            </code>
             </content>
          </section>

      </sections> 
    </section>
    <relatedTopics>
          <externalLink>
          <linkText>Beekins DS Theory</linkText>

          <linkUri>http://www.furcadia.com/beekins/masons/knowledgebase/dstheory.html</linkUri>
      </externalLink>
            <externalLink>
          <linkText>Dreammaker's Guild Article on Dragonspeak</linkText>
          <linkUri>http://dreammakersguild.com/?page=basic_ds</linkUri>
      </externalLink>
   
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>